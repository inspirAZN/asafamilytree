<!DOCTYPE HTML>
<html>
	<head>
		<!-- Latest compiled and minified CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">

		<!-- Optional theme -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap-theme.min.css">
		<link rel="stylesheet" href="stylesheets/style.css">
		<meta charset="utf-8">

	</head>
	<body>
		<nav class="navbar navbar-default navbar-static-top" role="navigation">
		  	<div class="container">
		  		<div class="navbar-header">
				    <a class="navbar-brand" href="#">
				       	The Official Joseph Caluza&trade;
				    </a>
			    </div>
		  	</div>
		</nav>

		<div class="container">
			<div class="col-sm-12 col-12">
				<h1 class="page-header text-center">The Official AWESOMEYAKE Buddy Lineage&trade;</h1>
				<p class="text-center">No one said it would be pretty... Drag the nodes around for a better view.  Improvements to come!</p>

			</div>
		</div>

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
		<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>

		<script>

			var links;
			var nodes = {};

			d3.json("data/buddies.json", function(data) {
				links = data.links;

				// Compute the distinct nodes from the links.
				links.forEach(function(link) {
				  link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
				  link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
				});

				var width = 960,
			    height = 900;


				var force = d3.layout.force()
				    .nodes(d3.values(nodes))
				    .links(links)
				    .size([width, height])
				    .linkDistance(50)
				    .charge(-450)
				    .on("tick", tick)
				    .start();

				var svg = d3.select("body").append("svg")
				    .attr("width", width)
				    .attr("height", height);

				// Per-type markers, as they don't inherit styles.
				svg.append("defs").selectAll("marker")
				    .data(["suit", "child", "root"])
				  .enter().append("marker")
				    .attr("id", function(d) { return d; })
				    .attr("viewBox", "0 -5 10 10")
				    .attr("refX", 15)
				    .attr("refY", -1.5)
				    .attr("markerWidth", 6)
				    .attr("markerHeight", 6)
				    .attr("orient", "auto")
				  .append("path")
				    .attr("d", "M0,-5L10,0L0,5");

				var path = svg.append("g").selectAll("path")
				    .data(force.links())
				  .enter().append("path")
				    .attr("class", function(d) { return "link " + d.type; })
				    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

				var circle = svg.append("g").selectAll("circle")
				    .data(force.nodes())
				  .enter().append("circle")
				    .attr("r", 6)
				    .call(force.drag);

				var text = svg.append("g").selectAll("text")
				    .data(force.nodes())
				  .enter().append("text")
				    .attr("x", 8)
				    .attr("y", ".31em")
				    .text(function(d) { return d.name; });

				// Use elliptical arc path segments to doubly-encode directionality.
				function tick() {
				  path.attr("d", linkArc);
				  circle.attr("transform", transform);
				  text.attr("transform", transform);
				}

				function linkArc(d) {
				  var dx = d.target.x - d.source.x,
				      dy = d.target.y - d.source.y,
				      dr = Math.sqrt(dx * .5 * dx + dy * dy);
				  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
				}

				function transform(d) {
				  return "translate(" + d.x + "," + d.y + ")";
				}

			});	



		</script>
		
	</body>
</html>

